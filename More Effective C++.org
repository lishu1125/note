* *条款1：仔细区别pointers和references*
- 没有null reference
#+BEGIN_SRC c++
char* pc = 0; //将pointer设定为null
char& pc = *pc //让reference代表null pointer的解引用
#+END_SRC
这是有害行为，其结果不可预期（C++对此没有定义）
- “没有所谓的null reference”这个事实意味使用references可能会比使用pointers更富有效率。这是因为使用reference之前不需要测其有效性
* *条款2：最好使用c++转型操作符*
| static\_cast      | 基本上拥有与c旧式转型相同的威力与意义，以及相同的限制                                                              |
| const\_cast       | 改变表达式中的常量行（constness）或变易性（volatileness）。最常见用途是将某一个对象的常量性去除                    |
| dynamic\_cast     | 将指向base class的pointers或references转型为指向derived（或sibling base）class的pointers或references，并得         |
|                   | 知转型是否成功。如果转型失败，会以一个null指针（当转型对象是指针）或一个exception（当转型对象是reference）表现出来 |
| reinterpret\_cast | 最常用用途是转换“函数指针”类型                                                                                   |
- 利用宏仿真
#+BEGIN_SRC c++
#define static_cast(TYPE, EXPR) ((TYPE)(EXPR))
#define const_cast(TYPE, EXPR) ((TYPE)(EXPR))
#define reinterpret_cast(TYPE, EXPR) ((TYPE)(EXPR))
#+END_SRC
* *条款3：绝对不要以多态（polymorphically）方式处理数组*
- 多态（polymorphism）和指针算术不能混用
* *条款4：非必要不提供default constructor*
- 添加无意义的default constructor会影响classes的效率
* *条款5：对定制的“类型转换函数”保持警觉*
- 所谓隐式类型转换操作符：关键词operator之后加上一个类型名称，不能为此函数指定返回值类型
#+BEGIN_SRC c++
class Rational {
public:
    ...
    operator double() const;
};
#+END_SRC
这个函数会在以下情况被自动调用：
#+BEGIN_SRC c++
Rational r(1, 2); //r的值是1/2
double d = 0.5 * r; //将r转换为double，然后执行乘法运算
#+END_SRC
解决办法是以功能对等的另一个函数取代类型转换操作符
#+BEGIN_SRC c++
class Rational {
public:
    ...
    double asDouble() const; //将Rational转换为double
};
#+END_SRC
如此的member function必须被明确调用
#+BEGIN_SRC c++
Rational r(1, 2);
cout << r; //错误！Rationals没有operator double()
cout << r.asDouble(); //可！以double形式输出r
#+END_SRC
- 通过单自变量constructs完成的隐式转换，较难消除
#+BEGIN_SRC c++
template<class T>
class Array {
public:
    Array(int lowBound, int highBound);
    Array(int size);

    T& operator[](int index);
    ...
};
#+END_SRC
考虑一个用来对Array<int>对象进行比较动作的函数，以及一小段代码：
#+BEGIN_SRC c++
bool operator==(const Array<int>& lhs,
                const Array<int>& rhs);
Array<int> a(10);
Array<int> b(10);
...
for (int i=0; i<10; ++i) {
    if(a == b[i]) { //哎哟！"a"应该是"a[i]"才对
        // do something;
    }
    else {
        // do something;
    }
}
#+END_SRC
编译器产生类似这样的代码：
#+BEGIN_SRC c++
for (int i=0; i<10; ++i)
    if(a == static_cast<Array<int> >(b[i]))) ...
#+END_SRC
- 关键词explicit：只要constructors声明为explicit，编译器便不能因隐式类型转换的需要而调用它们
- 没有任何一个转换程序可以内含一个以上的“用户定制转换行为（亦即单自变量或隐式类型转换操作符）
* *条款6：区别increment/decrement操作符的前置（prefix）和后置（postfix）形式*
- 后置有一个int参数
| 前置 | 返回一个reference |
| 后置 | 返回一个const对象 |
为什么后置操作符必须返回一个const对象，如果不这样，以下动作是合法的：
#+BEGIN_SRC c++
UPInt i;
i++++; //实施后置操作符两次

i.operator++(0).operator++(0);
#+END_SRC
- 后置式操作符的实现应以其前置式兄弟为基础
* *条款7：千万不要重载&&，||和,操作符*
* *条款8：了解各种不同意义的new和delete*
** new operator
- 调用operator new分配足够的空间，并调用相关对象的构造函数
- 不可以被重载
#+BEGIN_SRC c++
string *ps=new string("123");
#+END_SRC
** operator new
- 只分配所要求的空间，不调用相关对象的构造函数
- 可以被重载
- 重载时，返回类型必须声明为void*
- 重载时，第一个参数类型必须为表达要求分配空间的大小（字节），类型为size\\_t
- 重载时，可以带其它参数
- 编译器本身就隐含着一个 void* operator new( size\_t )
- 要实现不同的内存分配行为，应该重载operator new，而不是new
- 我们经常看到这么一句话： operator new 可以重载， placement new 不可重载。其实此处所说的不可重载应该是指全局的 placement new 不可重载，对于类域中的 placement new 是可以重载的，而且只要重载了任何一种形式的 operator new 都应该顺便重载 placement new ， 即 void * operator new(std::size\_t count, void *ptr)
- Operator new 由于其特殊性，编译器提供了默认提供 6 种全局重载形式，同时还允许用户提供自定义的全局 operator new ，其参数甚至可以和全局版本一样，除全局 placement new 外。对于类域，任何形式的 new 都是可以重载的，包括 placement new 形式
全局的 operator new 函数有六种重载形式：
#+BEGIN_SRC c++
void *operator new(std::size_t count)
    throw(std::bad_alloc); // 一般的版本

void *operator new(std::size_t count,  // 兼容早版本的 new
    const std::nothrow_t&) throw();    // 内存分配失败不会抛出异常

void *operator new(std::size_t count, void *ptr) throw(); //placement 版本

void *operator new[](std::size_t count)
    throw(std::bad_alloc);

void *operator new[](std::size_t count,
    const std::nothrow_t&) throw();

void *operator new[](std::size_t count, void *ptr) throw();
#+END_SRC
- 重载的operator new必须是类成员函数或全局函数，而不可以是某一名空间之内的函数或是全局静态函数
- 如果重载了一个operator new，记得一定要在相同的范围内重载operator delete
如果使用不同的参数类型重载operator new/delete，则请采用如下函数声明形式：
#+BEGIN_SRC c++
//返回的指针必须能被普通的 ::operator delete(void*) 释放  
void* operator new(size_t size, const char* file, int line);  
//析构函数抛异常时被调用  
void operator delete(void* p, const char* file, int line);
#+END_SRC
调用时采用以下方式：
#+BEGIN_SRC c++
string* pStr = new (__FILE, __LINE__) string;
#+END_SRC
这样就能跟踪内存分配的具体位置，定位这个动作发生在哪个文件的哪一行代码中了。在“检测内存错误”和“统计内存使用数据”时通常会用这种方式重载
- 某个class重载operator new时必须将其定义为类的静态函数。因为operator new是在类的具体对象被构建出来之前调用的，在调用operator new的时候this指针尚未诞生，因此重载的 operator new必须是static的：
#+BEGIN_SRC c++
class B  
{  
public:  
     static void * operator new(size_t size);  
     static void operator delete(void *p);  
     // other members  
};  
void *B::operator new(size_t size)  
{  
    ...  
}  
void B::operator delete(void *p)  
{  
    ...  
} 
#+END_SRC
** placement new
- placement new 是重载operator new 的一个标准、全局的版本，它不能够被自定义的版本代替
- placement new 并不分配内存，只是返回指向已经分配好的某段内存的一个指针。因此不能删除它，但需要调用对象的析构函数
- Placement new使用步骤
第一步 缓存提前分配（有三种方式）

在堆上进行分配：
#+BEGIN_SRC c++
class Task;
char * buff = new [sizeof(Task)]; //分配内存
#+END_SRC
(请注意auto或者static内存并非都正确地为每一个对象类型排列，所以，你将不能以placement new使用它们。)

在栈上进行分配：
#+BEGIN_SRC c++
class Task;
char buf[N*sizeof(Task)]; //分配内存
#+END_SRC
直接通过地址来使用(必须是有意义的地址)：
#+BEGIN_SRC c++
void* buf = reinterpret_cast<void*> (0xF00F);
#+END_SRC
第二步 对象的分配
#+BEGIN_SRC c++
Task *ptask = new(buf) Task;
#+END_SRC
第三步 使用
#+BEGIN_SRC c++
ptask->memberfunction();
ptask-> member;
#+END_SRC
第四步 对象的析构
#+BEGIN_SRC c++
ptask->~Task(); //调用外在的析构函数
#+END_SRC
第五步 释放
你可以反复利用缓存并给它分配一个新的对象（重复步骤2，3，4），如果你不打算再次使用这个缓存，你可以象这样释放它：
#+BEGIN_SRC c++
delete [] buf;
#+END_SRC
跳过任何步骤就可能导致运行时间的崩溃，内存泄露，以及其它的意想不到的情况
